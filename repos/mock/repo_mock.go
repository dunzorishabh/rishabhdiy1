// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package mock is a generated GoMock package.
package mock

import (
	models "go-mux/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockRepoInterface is a mock of RepoInterface interface.
type MockRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepoInterfaceMockRecorder
}

// MockRepoInterfaceMockRecorder is the mock recorder for MockRepoInterface.
type MockRepoInterfaceMockRecorder struct {
	mock *MockRepoInterface
}

// NewMockRepoInterface creates a new mock instance.
func NewMockRepoInterface(ctrl *gomock.Controller) *MockRepoInterface {
	mock := &MockRepoInterface{ctrl: ctrl}
	mock.recorder = &MockRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoInterface) EXPECT() *MockRepoInterfaceMockRecorder {
	return m.recorder
}

// AddProductsToStore mocks base method.
func (m *MockRepoInterface) AddProductsToStore(db *gorm.DB, StoreId int, storeProducts []*models.StoreProducts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProductsToStore", db, StoreId, storeProducts)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProductsToStore indicates an expected call of AddProductsToStore.
func (mr *MockRepoInterfaceMockRecorder) AddProductsToStore(db, StoreId, storeProducts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProductsToStore", reflect.TypeOf((*MockRepoInterface)(nil).AddProductsToStore), db, StoreId, storeProducts)
}

// CreateNewStore mocks base method.
func (m *MockRepoInterface) CreateNewStore(db *gorm.DB, store *models.Store) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateNewStore", db, store)
}

// CreateNewStore indicates an expected call of CreateNewStore.
func (mr *MockRepoInterfaceMockRecorder) CreateNewStore(db, store interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewStore", reflect.TypeOf((*MockRepoInterface)(nil).CreateNewStore), db, store)
}

// FetchProductsByIDList mocks base method.
func (m *MockRepoInterface) FetchProductsByIDList(db *gorm.DB, pIds []int) ([]*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProductsByIDList", db, pIds)
	ret0, _ := ret[0].([]*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProductsByIDList indicates an expected call of FetchProductsByIDList.
func (mr *MockRepoInterfaceMockRecorder) FetchProductsByIDList(db, pIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProductsByIDList", reflect.TypeOf((*MockRepoInterface)(nil).FetchProductsByIDList), db, pIds)
}

// GetAllProductsFromStore mocks base method.
func (m *MockRepoInterface) GetAllProductsFromStore(db *gorm.DB, StoreId int) ([]*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProductsFromStore", db, StoreId)
	ret0, _ := ret[0].([]*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProductsFromStore indicates an expected call of GetAllProductsFromStore.
func (mr *MockRepoInterfaceMockRecorder) GetAllProductsFromStore(db, StoreId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProductsFromStore", reflect.TypeOf((*MockRepoInterface)(nil).GetAllProductsFromStore), db, StoreId)
}

// GetProduct mocks base method.
func (m *MockRepoInterface) GetProduct(db *gorm.DB, pId int) ([]*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", db, pId)
	ret0, _ := ret[0].([]*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockRepoInterfaceMockRecorder) GetProduct(db, pId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockRepoInterface)(nil).GetProduct), db, pId)
}

// GetStoreProducts mocks base method.
func (m *MockRepoInterface) GetStoreProducts(db *gorm.DB, sId int) ([]*models.StoreProducts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreProducts", db, sId)
	ret0, _ := ret[0].([]*models.StoreProducts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoreProducts indicates an expected call of GetStoreProducts.
func (mr *MockRepoInterfaceMockRecorder) GetStoreProducts(db, sId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreProducts", reflect.TypeOf((*MockRepoInterface)(nil).GetStoreProducts), db, sId)
}

// CheckStoreAvailableInDB mocks base method.
func (m *MockRepoInterface) CheckStoreAvailableInDB(db *gorm.DB, sId int) ([]*models.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStoreAvailableInDB", db, sId)
	ret0, _ := ret[0].([]*models.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckStoreAvailableInDB indicates an expected call of CheckStoreAvailableInDB.
func (mr *MockRepoInterfaceMockRecorder) CheckStoreAvailableInDB(db, sId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStoreAvailableInDB", reflect.TypeOf((*MockRepoInterface)(nil).CheckStoreAvailableInDB), db, sId)
}
